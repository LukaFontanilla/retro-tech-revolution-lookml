looker.plugins.visualizations.add({ create: function(element, config) { element.innerHTML = ` <style> .single-value-container { display: flex; justify-content: center; align-items: center; width: 100%; height: 100%; padding: 10px; box-sizing: border-box; } .single-value-content { text-align: center; } .single-value-value { font-size: ${config.textSize || '24px'}; color: ${config.textColor || 'black'}; } .single-value-icon { font-size: ${config.iconSize || '32px'}; color: ${config.iconColor || 'orange'}; } .bordered { border: ${config.borderWidth || '2px'} solid ${config.borderColor || 'gray'}; border-radius: ${config.borderRadius || '5px'}; padding: 10px; } </style> <div class="single-value-container"> <div class="single-value-content bordered"> <div class="single-value-icon"> &#128343; </div> <div class="single-value-value" id="single-value"></div> </div> </div> `; }, updateAsync: function(data, element, config, queryResponse, details, doneRendering) { this.clearErrors(); if (!queryResponse || !queryResponse.fields || !queryResponse.fields.measures || queryResponse.fields.measures.length === 0) { this.addError({ title: "No Measures", message: "This visualization requires at least one measure." }); return; } const firstMeasure = queryResponse.fields.measures[0].name; const firstRow = data[0]; const value = firstRow[firstMeasure].value; const valueElement = element.querySelector("#single-value"); valueElement.textContent = value; doneRendering(); }, options: { textSize: { type: "string", label: "Text Size", default: "24px", section: "Style", order: 1 }, textColor: { type: "string", label: "Text Color", display: "color", default: "black", section: "Style", order: 2 }, iconSize: { type: "string", label: "Icon Size", default: "32px", section: "Style", order: 3 }, iconColor: { type: "string", label: "Icon Color", display: "color", default: "orange", section: "Style", order: 4 }, borderWidth: { type: "string", label: "Border Width", default: "2px", section: "Border", order: 1 }, borderColor: { type: "string", label: "Border Color", display: "color", default: "gray", section: "Border", order: 2 }, borderRadius: { type: "string", label: "Border Radius", default: "5px", section: "Border", order: 3 } } });
